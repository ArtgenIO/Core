import { JSONSchema7Definition } from 'json-schema';
import { FieldTag, FieldType, ISchema } from '../../schema';
import { isAutoGenerated, isCapability } from '../../schema/util/is-primary';
import { CrudAction } from '../interface/crud-action.enum';

export const schemaToJsonSchema = (
  schema: ISchema,
  action: CrudAction,
): JSONSchema7Definition => {
  const jschema: JSONSchema7Definition = {
    type: 'object',
    properties: {},
    required: [],
  };

  for (const field of schema.fields) {
    if (action === CrudAction.CREATE || action === CrudAction.UPDATE) {
      // Primary UUID is auto generated
      if (
        field.tags.includes(FieldTag.PRIMARY) &&
        field.type == FieldType.UUID
      ) {
        continue;
      }

      // Created At / Updated At / Deleted At field is auto generated
      if (isCapability(field)) {
        continue;
      }
    }

    const fieldDef: JSONSchema7Definition = {
      title: field.label,
      type: 'string',
      readOnly: isAutoGenerated(field),
      default: field.defaultValue as any,
    };

    switch (field.type) {
      case FieldType.BOOLEAN:
        fieldDef.type = 'boolean';
        fieldDef.default = false;
        break;
      case FieldType.BIGINT:
      case FieldType.TINYINT:
      case FieldType.SMALLINT:
      case FieldType.MEDIUMINT:
      case FieldType.FLOAT:
      case FieldType.REAL:
      case FieldType.DOUBLE:
      case FieldType.DECIMAL:
      case FieldType.INTEGER:
        fieldDef.type = 'number';
        fieldDef.default = field.defaultValue as any;
        break;
    }

    if (field.type === FieldType.ENUM) {
      fieldDef.enum = field.typeParams.values;
    }

    jschema.properties[field.reference] = fieldDef;

    // Required if not nullable
    if (!field.tags.includes(FieldTag.NULLABLE)) {
      jschema.required.push(field.reference);
    }
  }

  return jschema;
};
