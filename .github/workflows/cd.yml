name: 'cd'

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  check:
    name: Check Is Release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Expose git commit information
        uses: rlespinasse/git-commit-data-action@v1.x

      - name: Parse data
        id: parse
        run: |
          echo "::set-output name=is_release::${{ startsWith(env.GIT_COMMIT_MESSAGE_SUBJECT, 'Release ') }}"
          echo "::set-output name=version::$(echo ${{ env.GIT_COMMIT_MESSAGE_SUBJECT }} | sed -r 's/Release //')"
          echo "::set-output name=tag::$(echo ${{ env.GIT_COMMIT_MESSAGE_SUBJECT }} | sed -r 's/Release /v/')"

    outputs:
      is_release: ${{ steps.parse.outputs.is_release }}
      version: ${{ steps.parse.outputs.version }}
      tag: ${{ steps.parse.outputs.tag }}
      commit_message: ${{ env.GIT_COMMIT_MESSAGE_SUBJECT }}
      commit_body: ${{ env.GIT_COMMIT_MESSAGE_BODY }}

  test-mariadb:
    name: Testing (MariaDB)
    needs: common-tests
    runs-on: ubuntu-latest

    services:
      mariadb:
        image: mariadb:10
        env:
          MARIADB_DATABASE: artgen
          MARIADB_USER: artgen
          MARIADB_PASSWORD: artgen
          MARIADB_ROOT_PASSWORD: artgen
          TZ: UTC
        ports:
          - 3306:3306

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install the interpreter
        uses: actions/setup-node@v2
        with:
          node-version: 16.x
          cache: yarn

      - name: Install dependencies
        run: yarn install

      - name: Run API tests (MariaDB)
        run:  yarn test
        env:
          ARTGEN_DATABASE_DSN: mariadb://artgen:artgen@localhost:3306/artgen

      - name: Run UI tests (MariaDB)
        run: yarn test:cy
        env:
          ARTGEN_DATABASE_DSN: mariadb://artgen:artgen@localhost:3306/artgen

  test-mysql:
    name: Testing (MySQL)
    needs: common-tests
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8
        env:
          MYSQL_DATABASE: artgen
          MYSQL_USER: artgen
          MYSQL_PASSWORD: artgen
          MYSQL_ROOT_PASSWORD: artgen
          TZ: UTC
        ports:
          - 3306:3306

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install the interpreter
        uses: actions/setup-node@v2
        with:
          node-version: 16.x
          cache: yarn

      - name: Install development dependencies
        run: yarn install

      - name: Run API tests (MySQL)
        run: yarn test
        env:
          ARTGEN_DATABASE_DSN: mysql://artgen:artgen@localhost:3306/artgen

      - name: Run UI tests (MySQL)
        run: yarn test:cy
        env:
          ARTGEN_DATABASE_DSN: mysql://artgen:artgen@localhost:3306/artgen

  test-sqlite:
    name: Testing (SQLite)
    needs: common-tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install the interpreter
        uses: actions/setup-node@v2
        with:
          node-version: 16.x
          cache: yarn

      - name: Install development dependencies
        run: yarn install

      - name: Run API tests (SQLite)
        run: yarn test
        env:
          ARTGEN_DATABASE_DSN: sqlite:./test-api.db

      - name: Run UI tests (SQLite)
        run: yarn test:cy
        env:
          ARTGEN_DATABASE_DSN: sqlite:./test-ui.db

  test-postgres:
    name: Testing (Postgres)
    needs: common-tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_DB: artgen
          POSTGRES_USER: artgen
          POSTGRES_PASSWORD: artgen
          TZ: UTC
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install the interpreter
        uses: actions/setup-node@v2
        with:
          node-version: 16.x
          cache: yarn

      - name: Install development dependencies
        run: yarn install

      - name: Run API tests (PostgreSQL)
        run: yarn test
        env:
          ARTGEN_DATABASE_DSN: postgres://artgen:artgen@localhost:5432/artgen

      - name: Run UI tests (PostgreSQL)
        run: yarn test:cy
        env:
          ARTGEN_DATABASE_DSN: postgres://artgen:artgen@localhost:5432/artgen

  common-tests:
    name: Common Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install the interpreter
        uses: actions/setup-node@v2
        with:
          node-version: 16.x
          cache: yarn

      - name: Install development dependencies
        run: yarn install

      - name: Run type checking
        run: yarn test:types

      - name: Run API tests
        run: yarn test:cov
        env:
          ARTGEN_DATABASE_DSN: "sqlite::memory:"

      - name: Run UI tests
        run: yarn test:cy
        env:
          ARTGEN_DATABASE_DSN: "sqlite::memory:"

      - name: Run build
        run: yarn build

      - name: Collect coverage
        uses: coverallsapp/github-action@master
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}


  release-docker:
    name: Docker release
    runs-on: ubuntu-latest
    needs:
      - check
      - test-mariadb
      - test-mysql
      - test-postgres
      - test-sqlite
    if: ${{ success() && needs.check.outputs.is_release == 'true' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Log in to the docker registry
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: artgenio/core:latest,artgenio/core:${{ needs.check.outputs.version }}


  release-gh:
    name: GitHub release
    runs-on: ubuntu-latest
    needs:
      - check
      - test-mariadb
      - test-mysql
      - test-postgres
      - test-sqlite
    if: ${{ success() && needs.check.outputs.is_release == 'true' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Create git tag
        uses: negz/create-tag@v1
        with:
          version: ${{ needs.check.outputs.tag }}
          message: ${{ needs.check.outputs.commit_message }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GH release
        id: release
        uses: softprops/action-gh-release@v1
        with:
          name: ${{ needs.check.outputs.version }}
          body:
            "**Automated release ${{ needs.check.outputs.commit_message }}** by GitHub Actions <3\n\n
            ${{ needs.check.outputs.commit_body }}\n
            Docker install ```docker run -p 80:7200 artgenio/core:${{ needs.check.outputs.version }}```
            "
          tag_name: ${{ needs.check.outputs.tag }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    outputs:
      upload_url: ${{ steps.release.outputs.upload_url }}
      url: ${{ steps.release.outputs.url }}


  # On heroku we always run the bleeding edge version
  deploy-staging:
    name: Deploy staging to Heroku
    runs-on: ubuntu-latest
    needs:
      - common-tests
    if: ${{ success() }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - uses: akhileshns/heroku-deploy@v3.12.12
        with:
          heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
          heroku_app_name: ${{ secrets.HEROKU_APP_NAME }}
          heroku_email: ${{ secrets.HEROKU_EMAIL }}

  # The demo is the latest released version
  deploy-demo:
    name: Deploy Demo
    runs-on: ubuntu-latest
    needs:
      - check
      - release-docker
    if: ${{ success() }}

    steps:
      - uses: actions/setup-node@v2
        with:
          node-version: '14'
      - name: Deploy the build
        run: npx caprover deploy --appToken ${{ secrets.DEMO_APP_TOKEN }} --caproverUrl ${{ secrets.DEMO_APP_URL }} --imageName artgenio/core:${{ needs.check.outputs.version }} --appName ${{ secrets.DEMO_APP_NAME }}